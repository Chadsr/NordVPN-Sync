language: python

jobs:
  include:
    - stage: testing
      python: '3.5'
      install: true
      script:
      - python setup.py install
    -
      python: '3.6'
      install: true
      script:
      - python setup.py install
    -
      python: '3.7-dev'
      install: true
      script:
      - python setup.py install
    -
      python: nightly
      install: true
      script:
      - python setup.py install

    - stage: deploy_pypi
      python: '3.5'
      install: true
      script:
      - python setup.py install

      deploy:
        provider: pypi
        user: Chadsr
        password:
          secure: dSfgQQ9wsJ1VYsWXf/nG/7nNLwlO0fkKxPNElUN+od0wf6AQiLbmO2QjO28o76K/SEXh+iqSE/dRzOKsGTpYSOEWlntxhb4IOC6dFzU1Cfw1RBDLRHwEUsAuh7W0REoVTL7WHot+XEwvzsIxoR3zRAx8+UmcOXX/e8NaxdV7CRmY8bUqv1bDpcvhXRLwcPd72CpQoP4/GAmKiTzLHXGbWBBua+X8sMe5M8QNVLL7qAMXCUtjoXbYBov2TJlL3/8JrFclIs+xySVmyhldhNWsESiFitwA7D8OpdCyvFOS6e92fAfvcLsWvxc7/MWVWOdPATMuL2y4AW2ISb0c8MicDxDi9JyOT7Aq/GOS8NbMQw0hOlBRPASzbU4uKZX5Tp7C0BKHUsgXkK5qrrKLSxgCXJsFoXOsAgKSdBHWicCXpZCq2KYnlG6SywjfvEWwtvgieM2Hi2EgMeGQKEYDyU1jbS6jAguzU5vkxvslEciK5iM64uTeEdEK43becxhbW4ieLJ63mdzaIoJeWo0K1lOck+260eUdKJ9O//RZOoYEYjDD43d42QRlbEXO7lXjFIIc5YQhGWBAQRwnlcXSJyOV7L52f8pxjKOltC1Vh5i+DHqHwshdY2NO1ZyNVyT57FQImQyZf4uhN2jdpUsytdeOuE66lls2tKy64P0GBmEHynI=
        on:
          branch: master
          tags: true
    - stage: deploy_builds
      sudo: required
      services:
      - docker
      env:
      - DESCRIPTION="A CLI tool for automating the importing, securing and usage of
        NordVPN OpenVPN servers through NetworkManager."
      - VERSION=${TRAVIS_TAG}
      - GH_EMAIL=hello@rchadwick.co.uk
      - GH_USER=${TRAVIS_REPO_SLUG%/*}
      - NAME=${TRAVIS_REPO_SLUG#*/}
      - PACKAGE=nordnm
      - JFROG_CLI_OFFER_CONFIG=false
      - BTKEY:
          secure: "pPG85EvUVWahXHSVToXJ9yE/ow4U1mC/RX63J3mjSG5Ywp7BYqdNEa9/YD2cwZaDx1FiwHmbSHZWiYbmNkVKfI0CgcrGXCgKLeRusAHqCSAQ7TsDbk8/LW2e/5saSDqyE7dDvZxyktsJgn906cWu2ZcX+GnwC3sEVW2GNqVIxkRcMqjoTCgxewyodnOMurbSTRrIpVlgVsXu1nBhXvocatFNXE1/RhJnE43KBgVIZHDgGysdZl2RHYkMYy4oW3g80f/d2zrwvQhnlTezUWgx6TGjpfD6w+3JnwrlVG/17A76NBu2GT3YB545hrxPw7QikZ2KMYxJ2TEKN92KResclK8wWQx1IT1csikRYwkXIPESJxzAkQfPNBqmjOofekawc7XOzsC+btOOpJz1CEvksaXfaepGJOmJr2N7h7ZeMRI8I2sXicTsvL7/9R5Tbb5wDOtnmt0PiHMyHBGMF9sBwi64qjQGoq0bj6Q0AxIbXthd2v/p5BDHSA+7fDWUuLpmRyqiPuFZckg+Cd9Q1VsldcR8Qy3pkHMwhyKK4QBgqxsEAgCTFoAozkB9E8ICgE28lJwdk7aQ5Y24ynwcbUK8Jz981v5IlkvJs6vXD6jw1tEo3YNYvi0M5FBcwkH0FNSbEVu0U1dM75wNKjJpXPIX3FBF6+IcQE/K7qXgkT3lU4k="

      before_deploy:
      - git config --local user.name "${GH_USER}"
      - git config --local user.email "${GH_EMAIL}"
      - sudo apt-get update
      - sudo apt-get install -y ruby ruby-dev rubygems build-essential
      - gem install --no-ri --no-rdoc fpm
      - fpm -m "${GH_USER}" --description ${DESCRIPTION} --url "https://github.com/${GH_USER}/${NAME}"
        --provides "${PACKAGE}" -a "all" --no-python-fix-name --python-package-name-prefix
        "python3" --python-bin python3 --python-pip pip3 -d python3 -d python3-pip
        -d network-manager -d openvpn -d network-manager-openvpn-gnome -s python -t
        deb ${PACKAGE}
      - docker pull fedora
      - >
        docker run -v ${PWD}:/mnt/travis fedora /bin/sh -c "cd /mnt/travis && \ dnf
        install ruby-devel gcc make rpm-build libffi-devel -y --quiet && \ gem install
        --no-ri --no-rdoc fpm && \ fpm -m "${GH_USER}" --description ${DESCRIPTION} --url
        "https://github.com/${GH_USER}/${NAME}" --provides "${PACKAGE}" -a "all" --no-python-fix-name
        --python-package-name-prefix "python3" --python-bin python --python-pip pip
        -d NetworkManager -d openvpn -d NetworkManager-openvpn-gnome -s python -t
        rpm ${PACKAGE}
      # Get the jfrog CLI tool
      - curl -fL https://getcli.jfrog.io | sh
      # Create deb package
      - ./jfrog bt pc --key=${BTKEY} --user=${GH_USER} --licenses=GPL3 --vcs-url=https://github.com/${GH_USER}/${NAME} ${GH_USER}/${PACKAGE}-deb/${VERSION} || echo "package already exists"
      # Upload artifact to deb repo
      - ./jfrog bt upload --override=true --key ${BTKEY} --publish=true "${PACKAGE}_${VERSION}_all.deb" ${GH_USER}/${PACKAGE}-deb/${VERSION}
      # Generate metadata
      - curl -X POST -u ${GH_USER}:${BTKEY} https://api.bintray.com/calc_metadata/${GH_USER}/${PACKAGE}-deb
      # Create rpm package
      - ./jfrog bt pc --key=${BTKEY} --user=${GH_USER} --licenses=GPL3 --vcs-url=https://github.com/${GH_USER}/${NAME} ${GH_USER}/${PACKAGE}-rpm/${VERSION} || echo "package already exists"
      # Upload artifact to rpm repo
      - ./jfrog bt upload --override=true --key ${BTKEY} --publish=true "${PACKAGE}-${VERSION}-1.noarch.rpm" ${GH_USER}/${PACKAGE}-rpm/${VERSION}
      # Generate metadata
      - curl -X POST -u ${GH_USER}:${BTKEY} https://api.bintray.com/calc_metadata/${GH_USER}/${PACKAGE}-rpm
      deploy:
        provider: releases
        api_key:
          secure: pK7tExJc33HSztagm34IHuFwtVRNzXYiwEyuPlYJpXXG4REMQiwh7AErwEaSwoyXG3wnxKNsTiPz6/IuR0e1CnFwSypV0IDOChKvRVXZroeUZ2+trz/w23+NtNn0IA/DGxBchkpoTCJgEmeAn9PYAbuosZfc5YAnO8uIP0zSjWqtUjiYpgW2qyaAXIITdBg8QW7WRHqRa0jPZahe9ZSe+z9x5824maHPl0UHPpJzYSibkER2RAnPKwckY2mJZHndMdc6AfdseUkt5w4JgVLuXDimtOYm9wJM4igAruvrvadw64bY6GcNPVmJKR5zO/WoNw3lg/uAZuWqvbEhmD9Ws63PFlJSGSu0FygqMd9prcabcdCxVmEHkniMW3APVwF7m0JquPo6P9NGZrQkUvU/RWoEnHRWhxkWpxsWbnvdRCo3dh49jZXoMcsMEb6eqv0y398ymxu1MdWH3ciD2nMkgswFRfy1I1h/8kNkCog8DDXVbyVzcjoASmnNhgNG2pt6MHiTAerNcTvyDzszOOP/5FoJJtRdMeBoDhUCHeCSDaWKvzeC8XYeR5AMpWlRrWgGlkhtEOmHQy0oTkJTqHhqfB6jM7d97Sm8sNOpnNUbXDrvX1YCLKQ5K26Uh0gDeoo4fF3zZoitIArq2XvqncMMlap2jK76pSi4sgHXuLXdUX8=
        skip_cleanup: true
        file_glob: true
        file:
          - ${PACKAGE}_${VERSION}_all.deb
          - ${PACKAGE}-${VERSION}-1.noarch.rpm
        on:
          repo: "${GH_USER}/${NAME}"
          branch: master
          tags: true

stages:
- testing
- name: deploy_pypi
  if: branch = master AND tag IS present
- name: deploy_builds
  if: branch = master AND tag IS present
